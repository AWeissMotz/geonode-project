version: '2.2'
services:

  db:
    image: geonode/postgis:9.6
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: {{project_name}}
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    environment:
      - GEONODE_DATABASE=geonode
      - GEONODE_DATABASE_PASSWORD=geonode
      - GEONODE_GEODATABASE=geonode_data
      - GEONODE_GEODATABASE_PASSWORD=geonode_data

  # elasticsearch:
  #   image: elasticsearch
  #   restart: unless-stopped
  #   container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
  #   stdin_open: true
  #   # tty: true
  #   labels:
  #       org.geonode.component: elasticsearch
  #       org.geonode.instance.name: {{project_name}}

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: {{project_name}}

  celery:
    restart: unless-stopped
    build: .
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: {{project_name}}
    depends_on:
      - db
  #     - elasticsearch
      - rabbitmq
    command: celery worker --app={{project_name}}.celeryapp:app -B -l INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    environment:
      - DJANGO_SETTINGS_MODULE={{project_name}}.settings
      - GEONODE_INSTANCE_NAME={{project_name}}
      - GEONODE_LB_HOST_IP
      - GEONODE_LB_PORT
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - DEFAULT_BACKEND_DATASTORE=datastore
      - GEONODE_DATABASE=geonode
      - GEONODE_DATABASE_PASSWORD=geonode
      - GEONODE_GEODATABASE=geonode_data
      - GEONODE_GEODATABASE_PASSWORD=geonode_data
      - ASYNC_SIGNALS=False
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - ALLOWED_HOSTS=['django',]
      - CELERY_CMD=celery worker --app={{project_name}}.celeryapp:app --broker=amqp://guest:guest@rabbitmq:5672/ -B -l INFO
      - IS_CELERY=true
      - C_FORCE_ROOT=1
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
      - GEOSERVER_PUBLIC_LOCATION=http://{{project_name}}/geoserver/
      - GEOSERVER_LOCATION=http://{{project_name}}/geoserver/
      - SITEURL=http://{{project_name}}/

  data-dir-conf:
    image: geonode/geoserver_data:2.13.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: {{project_name}}
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  geoserver:
    image: geonode/geoserver:2.13.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: {{project_name}}
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/geoserver_data/data
    environment:
      - DOCKERHOST
      - GEONODE_LB_HOST_IP
      - GEONODE_LB_PORT
      - PUBLIC_PORT=80
      - DOCKER_HOST_IP

  django:
    restart: unless-stopped
    build: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: {{project_name}}
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
    # command: paver start_django -b 0.0.0.0:8000
    command: uwsgi --ini uwsgi.ini
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/geoserver_data/data
    environment:
      - DJANGO_SETTINGS_MODULE={{project_name}}.settings
      - GEONODE_INSTANCE_NAME={{project_name}}
      - GEONODE_LB_HOST_IP
      - GEONODE_LB_PORT
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - DEFAULT_BACKEND_DATASTORE=datastore
      - GEONODE_DATABASE=geonode
      - GEONODE_DATABASE_PASSWORD=geonode
      - GEONODE_GEODATABASE=geonode_data
      - GEONODE_GEODATABASE_PASSWORD=geonode_data
      - ASYNC_SIGNALS=False
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - ALLOWED_HOSTS=['django',]
      - CELERY_CMD=celery worker --app={{project_name}}.celeryapp:app --broker=amqp://guest:guest@rabbitmq:5672/ -B -l INFO
      - IS_CELERY=false
      - C_FORCE_ROOT=1
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
      - GEOSERVER_PUBLIC_LOCATION=http://{{project_name}}/geoserver/
      - GEOSERVER_LOCATION=http://{{project_name}}/geoserver/
      - SITEURL=http://{{project_name}}/
      - COMPOSE_HTTP_TIMEOUT=300
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - TIME_ENABLED=True
      - MOSAIC_ENABLED=False
      - GEOGIG_ENABLED=False
      # - DOCKER_API_VERSION: "1.24"

  geonode:
    image: geonode/nginx:geoserver
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: {{project_name}}
    depends_on:
      - django
      - celery
      - geoserver
    ports:
      - "80:80"

volumes:
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
